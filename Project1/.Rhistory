load(file)
# Extract the collaboration matrix and attributes
collaboration_network <- Borgatti_Scientists504$Collaboration
attributes <- Borgatti_Scientists504$Attributes
# Apply the cutoff: retain only edges with weights > 3
cutoff <- 3
filtered_network <- ifelse(collaboration_network > cutoff, collaboration_network, 0)
graph_am <- graph_from_adjacency_matrix(collaboration_network, mode='undirected')
plot(graph_am, vertex.size=10, vertex.label=V(graph_am)$name)
constraint(graph_am)
print(colnames(Borgatti_Scientists504[['Attributes']]))
library(igraph)
igraph::plot(
collaboration_network,
layout = layout_with_fr,
vertex.label = NA,
vertex.size = 5,        # Smaller node size
vertex.shape = "sphere" # Interesting shape (e.g., "sphere", "circle", "square")
)
igraph::plot(
filtered_network,
layout = layout_with_fr,
vertex.label = NA,
vertex.size = 5,        # Smaller node size
vertex.shape = "sphere" # Interesting shape (e.g., "sphere", "circle", "square")
)
library(igraph)
igraph::plot(
filtered_network,
layout = layout_with_fr,
vertex.label = NA,
vertex.size = 5,        # Smaller node size
vertex.shape = "sphere" # Interesting shape (e.g., "sphere", "circle", "square")
)
graph_am <- graph_from_adjacency_matrix(filtered_network, mode='undirected')
plot(graph_am, vertex.size=10, vertex.label=V(graph_am)$name)
constraint(graph_am)
print(colnames(Borgatti_Scientists504[['Attributes']]))
library(igraph)
igraph::plot(
filtered_network,
layout = layout_with_fr,
vertex.label = NA,
vertex.size = 5,        # Smaller node size
vertex.shape = "sphere" # Interesting shape (e.g., "sphere", "circle", "square")
)
plot(
filtered_network,
layout = layout_with_fr,
vertex.label = NA,
vertex.size = 5,        # Smaller node size
vertex.shape = "sphere" # Interesting shape (e.g., "sphere", "circle", "square")
)
graphics::plot(
filtered_network,
layout = layout_with_fr,
vertex.label = NA,
vertex.size = 5,        # Smaller node size
vertex.shape = "sphere" # Interesting shape (e.g., "sphere", "circle", "square")
)
library(sna)
sna::plot(
filtered_network,
layout = layout_with_fr,
vertex.label = NA,
vertex.size = 5,        # Smaller node size
vertex.shape = "sphere" # Interesting shape (e.g., "sphere", "circle", "square")
)
plot(
filtered_network,
layout = layout_with_fr,
vertex.label = NA,
vertex.size = 5,        # Smaller node size
vertex.shape = "sphere" # Interesting shape (e.g., "sphere", "circle", "square")
)
#importing the data
load("Borgatti_Scientists504.RDA")
collaboration <- Borgatti_Scientists504$Collaboration
collaboration
# Assuming 'network_info' is your adjacency matrix
collaboration_matrix <- as.matrix(collaboration)
collaboration_matrix
# Create the graph object
g <- graph_from_adjacency_matrix(
collaboration_matrix,
mode = "undirected",
weighted = TRUE,
diag = FALSE
)
# Inspect the graph
print(g)
summary(g)
plot(g, layout = layout_with_fr, vertex.label = NA)
# Apply the cutoff
collaboration_cutoff <- collaboration_matrix
collaboration_cutoff[collaboration_cutoff <= 3] <- 0
# Convert to binary adjacency matrix
collaboration_binary <- collaboration_cutoff
collaboration_binary[collaboration_binary > 0] <- 1
# Create the cutoff graph
g_cutoff <- igraph::graph_from_adjacency_matrix(
collaboration_binary,
mode = "undirected",
weighted = FALSE,
diag = FALSE
)
# Remove isolates
g_cutoff <- igraph::delete_vertices(g_cutoff, igraph::V(g_cutoff)[igraph::degree(g_cutoff) == 0])
plot(g_cutoff, layout = layout_with_fr, vertex.label = NA)
# Basic graph properties
igraph::gsize(g_cutoff)        # Number of edges
igraph::vcount(g_cutoff)       # Number of vertices
igraph::edge_density(g_cutoff) # Density of the graph
if (!require(ggraph)) {
install.packages("ggraph")
}
plot(
g_cutoff,
layout = layout_with_fr,
vertex.label = NA,
vertex.size = 5,        # Smaller node size
vertex.shape = "sphere" # Interesting shape (e.g., "sphere", "circle", "square")
)
g_cutoff
colnames(g_cutoff)
Borgatti_Scientists504$Collaboration
Borgatti_Scientists504$Collaboration$Attributes
Borgatti_Scientists504$Attributes
colnames(Borgatti_Scientists504$Attributes)
Borgatti_Scientists504$Attributes$DeptID
Borgatti_Scientists504$Attributes$DeptID
g_cutoff
## Part2
attributes$DeptGroup <- ifelse(attributes$DeptID %in% c(1, 2, 5), 1, 0)
## Part2
library(sna)
attributes$DeptGroup <- ifelse(attributes$DeptID %in% c(1, 2, 5), 1, 0)
attributes
attributes <- g_cutoff[["Attributes"]]
attributes <- Borgatti_Scientists504[["Attributes"]]
attributes$DeptGroup <- ifelse(attributes$DeptID %in% c(1, 2, 5), 1, 0)
igraph::V(g_cutoff)$DeptGroup <- attributes$DeptGroup[match(igraph::V(g_cutoff)$name, attributes$NodeName)]
igraph::V(g_cutoff)$color <- ifelse(igraph::V(g_cutoff)$DeptGroup == 1, "green", "orange")
# Plot the network with vertices colored by DeptGroup
plot(
g_cutoff,
vertex.label = NA,
vertex.size = 5,
vertex.shape = 'sphere',
vertex.color = igraph::V(g_cutoff)$color,      # Color based on DeptGroup
edge.color = "gray",                           # Gray edges
main = "Collaboration Network Colored by DeptGroup",
layout = layout_with_fr(g_cutoff)              # Use Fruchterman-Reingold layout
)
random.seed(41)
set.seed(41)
attributes <- Borgatti_Scientists504[["Attributes"]]
set.seed(42)
attributes <- Borgatti_Scientists504[["Attributes"]]
attributes$DeptGroup <- ifelse(attributes$DeptID %in% c(1, 2, 5), 1, 0)
igraph::V(g_cutoff)$DeptGroup <- attributes$DeptGroup[match(igraph::V(g_cutoff)$name, attributes$NodeName)]
igraph::V(g_cutoff)$color <- ifelse(igraph::V(g_cutoff)$DeptGroup == 1, "green", "orange")
# Plot the network with vertices colored by DeptGroup
plot(
g_cutoff,
vertex.label = NA,
vertex.size = 5,
vertex.shape = 'sphere',
vertex.color = igraph::V(g_cutoff)$color,      # Color based on DeptGroup
edge.color = "gray",                           # Gray edges
main = "Collaboration Network Colored by DeptGroup",
layout = layout_with_fr(g_cutoff)              # Use Fruchterman-Reingold layout
)
# Plot the network with vertices colored by DeptGroup
plot(
g_cutoff,
vertex.label = NA,
vertex.size = 5,
vertex.shape = 'sphere',
vertex.color = igraph::V(g_cutoff)$color,      # Color based on DeptGroup
edge.color = "gray",                           # Gray edges
main = "Collaboration Network Colored by DeptGroup",
layout = layout_with_fr(g_cutoff)              # Use Fruchterman-Reingold layout,
legend("topright", legend = c("0", "1"), col = c("red", "orange"), pch = 19, pt.cex = 1.5)
legend("topright", legend = c("0", "1"), col = c("red", "orange"), pch = 19, pt.cex = 1.5)
legend("topright", legend = c("0", "1"), col = c("orange", "green"), pch = 19, pt.cex = 1.5)
0=
legend("topright", legend = c("0=Others", "1=Department"), col = c("orange", "green"), pch = 19, pt.cex = 1.5)
legend("topright", legend = c("Others", "Department"), col = c("orange", "green"), pch = 19, pt.cex = 1.5)
legend("bottomleft", legend = c("Others", "Department=Management+Economics+Behavioral"), col = c("orange", "green"), pch = 19, pt.cex = 1.5)
legend("bottomleft", legend = c("Others", "Department=Management+Economics+Behavioral"), col = c("orange", "green"), pch = 10, pt.cex = 1.5)
legend("bottomleft", legend = c("Others", "Department=Management+Economics+Behavioral"), col = c("orange", "green"), pch = 19, pt.cex = 1.2)
legend("bottomleft", legend = c("Others", "Department=Management+Economics+Behavioral"), col = c("red", "green"), pch = 19, pt.cex = 1.2)
# Plot the network with vertices colored by DeptGroup
plot(
g_cutoff,
vertex.label = NA,
vertex.size = 5,
vertex.shape = 'sphere',
vertex.color = igraph::V(g_cutoff)$color,      # Color based on DeptGroup
edge.color = "gray",                           # Gray edges
main = "Collaboration Network Colored by DeptGroup",
layout = layout_with_fr(g_cutoff)              # Use Fruchterman-Reingold layout,
)
legend("bottomleft", legend = c("Others", "Department=Management+Economics+Behavioral"), col = c("orange", "green"), pch = 19, pt.cex = 1.2)
# Compute centrality measures
igraph::V(g_cutoff)$Degree <- igraph::degree(g_cutoff, mode = "all")
igraph::V(g_cutoff)$Betweenness <- igraph::betweenness(g_cutoff, normalized = TRUE)
igraph::V(g_cutoff)$Betweenness <- igraph::betweenness(g_cutoff, normalized = TRUE)
# Create centrality data frame
centrality_df <- data.frame(DeptGroup = igraph::V(g_cutoff)$DeptGroup,
Degree = igraph::V(g_cutoff)$Degree,
Betweenness = igraph::V(g_cutoff)$Betweenness )
print(centrality_df)
# Compute beta centrality
igraph::V(g_cutoff)$BetaCentrality <- power_centrality(
g_cutoff,
nodes = V(g_cutoff),
exponent = beta_value,
rescale = TRUE # Optional: Rescale values for comparability
)
# Add to data frame if needed
centrality_df$BetaCentrality <- igraph::V(g_cutoff)$BetaCentrality
# Compute centrality measures
igraph::V(g_cutoff)$Degree <- igraph::degree(g_cutoff, mode = "all")
beta_value <- 0.5
igraph::V(g_cutoff)$BetaCentrality <- power_centrality(
g_cutoff,
nodes = V(g_cutoff),
exponent = beta_value,
)
# Create centrality data frame
centrality_df <- data.frame(DeptGroup = igraph::V(g_cutoff)$DeptGroup,
Degree = igraph::V(g_cutoff)$Degree,
BetaCentrality = igraph::V(g_cutoff)$BetaCentrality)
# Identify nodes with highest centrality
max_degree <- max(igraph::V(g_cutoff)$Degree)
nodes_max_degree <- igraph::V(g_cutoff)$name[igraph::V(g_cutoff)$Degree == max_degree]
cat("Node(s) with highest Degree Centrality:", nodes_max_degree, "\n")
cat("Degree Centrality Value:", max_degree, "\n\n")
max_betweenness <- max(igraph::V(g_cutoff)$Betweenness)
nodes_max_betweenness <- igraph::V(g_cutoff)$name[igraph::V(g_cutoff)$Betweenness == max_betweenness]
cat("Node(s) with highest Betweenness Centrality:", nodes_max_betweenness, "\n")
cat("Betweenness Centrality Value:", max_betweenness, "\n")
## Point 2
# Correlate Degree and Betweenness
correlation <- cor.test(centrality_df$Degree, centrality_df$Betweenness)
print("Correlation between Degree and Betweenness Centrality:")
print(correlation)
# Correlate DeptGroup with centrality measures
cor_dept_degree <- cor.test(centrality_df$DeptGroup, centrality_df$Degree)
print("Correlation between DeptGroup and Degree Centrality:")
print(cor_dept_degree)
cor_dept_betweenness <- cor.test(centrality_df$DeptGroup, centrality_df$Betweenness)
print("Correlation between DeptGroup and Betweenness Centrality:")
print(cor_dept_betweenness)
cor_dept_betweenness <- cor.test(centrality_df$DeptGroup, centrality_df$Betweenness)
## Point 2
# Correlate Degree and Betweenness
correlation <- cor.test(centrality_df$Degree, centrality_df$Betweenness)
data.frame
data.frame
data.frame
# Identify nodes with highest centrality
max_degree <- max(igraph::V(g_cutoff)$Degree)
nodes_max_degree <- igraph::V(g_cutoff)$name[igraph::V(g_cutoff)$Degree == max_degree]
cat("Node(s) with highest Degree Centrality:", nodes_max_degree, "\n")
cat("Degree Centrality Value:", max_degree, "\n\n")
max_betweenness <- max(igraph::V(g_cutoff)$Betweenness)
nodes_max_betweenness <- igraph::V(g_cutoff)$name[igraph::V(g_cutoff)$Betweenness == max_betweenness]
cat("Node(s) with highest Betweenness Centrality:", nodes_max_betweenness, "\n")
cat("Betweenness Centrality Value:", max_betweenness, "\n")
## Point 2
# Correlate Degree and Betweenness
correlation <- cor.test(centrality_df$Degree, centrality_df$Betweenness)
## Point 2
# Correlate Degree and Betweenness
centrality_df$Degree
## Point 2
# Correlate Degree and Betweenness
centrality_df$Betweenness
cat("Node(s) with highest Betweenness Centrality:", nodes_max_betweenness, "\n")
# cutoff > 3
# correlate the attribute variable containing (where Department = "Management Sciences" + "Economics" + "Behavioural scientists" is coded as 1 and all others as 0) with two measures of position of your choice.
# So the general research question is whether these (Management+Economics+Behavioural) scientists have a different collaboration "approach" than other scientists.
# Set working directory
setwd("C:/Users/Mardeen/Desktop/University/AdvancedSN/Project1")
######################## ASSIGNMENT 1 #################################
# Install igraph if you haven't already
install.packages("igraph")
# Load the igraph package
library(igraph)
library(sna)
# Set your working directory
# Load the .rda file
load("Borgatti_Scientists504.rda")
# Inspect the loaded data
ls()  # Should list "Borgatti_Scientists504"
# Extract the network matrix and attributes
network_info <- Borgatti_Scientists504[["NetworkInfo"]]
attributes <- Borgatti_Scientists504[["Attributes"]]
# Inspect the data
head(network_info)
head(attributes)
################################################################
collaboration <- Borgatti_Scientists504$Collaboration
collaboration
# Assuming 'network_info' is your adjacency matrix
collaboration_matrix <- as.matrix(collaboration)
collaboration_matrix
# Create the graph object
g <- graph_from_adjacency_matrix(
collaboration_matrix,
mode = "undirected",
weighted = TRUE,
diag = FALSE
)
# Inspect the graph
print(g)
summary(g)
plot(g, layout = layout_with_fr, vertex.label = NA)
################################################
attributes
# Apply the cutoff
collaboration_cutoff <- collaboration_matrix
collaboration_cutoff
collaboration_cutoff[collaboration_cutoff <= 3] <- 0
# Convert to binary adjacency matrix
collaboration_binary <- collaboration_cutoff
collaboration_binary[collaboration_binary > 0] <- 1
# Create the cutoff graph
g_cutoff <- igraph::graph_from_adjacency_matrix(
collaboration_binary,
mode = "undirected",
weighted = FALSE,
diag = FALSE
)
# Remove isolates
g_cutoff <- igraph::delete_vertices(g_cutoff, igraph::V(g_cutoff)[igraph::degree(g_cutoff) == 0])
plot(
g_cutoff,
layout = layout_with_fr,
vertex.label = NA,
vertex.size = 5,        # Smaller node size
vertex.shape = "sphere" # Interesting shape (e.g., "sphere", "circle", "square")
)
# Create the graph object
g <- graph_from_adjacency_matrix(
collaboration_matrix,
mode = "undirected",
weighted = TRUE,
diag = FALSE
)
# Set working directory
setwd("C:/Users/Mardeen/Desktop/University/AdvancedSN/Project1")
# Install igraph if you haven't already
install.packages("igraph")
# Load the igraph package
library(igraph)
library(sna)
# Load the .rda file
load("Borgatti_Scientists504.rda")
# Inspect the loaded data
ls()  # Should list "Borgatti_Scientists504"
# Extract the network matrix and attributes
network_info <- Borgatti_Scientists504[["NetworkInfo"]]
attributes <- Borgatti_Scientists504[["Attributes"]]
# Inspect the data
head(network_info)
head(attributes)
collaboration <- Borgatti_Scientists504$Collaboration
collaboration
# Assuming 'network_info' is your adjacency matrix
collaboration_matrix <- as.matrix(collaboration)
collaboration_matrix
# Create the graph object
g <- graph_from_adjacency_matrix(
collaboration_matrix,
mode = "undirected",
weighted = TRUE,
diag = FALSE
)
# Inspect the graph
print(g)
summary(g)
plot(g, layout = layout_with_fr, vertex.label = NA)
attributes
# Apply the cutoff
collaboration_cutoff <- collaboration_matrix
collaboration_cutoff
collaboration_cutoff[collaboration_cutoff <= 3] <- 0
# Convert to binary adjacency matrix
collaboration_binary <- collaboration_cutoff
collaboration_binary[collaboration_binary > 0] <- 1
# Create the cutoff graph
g_cutoff <- igraph::graph_from_adjacency_matrix(
collaboration_binary,
mode = "undirected",
weighted = FALSE,
diag = FALSE
)
# Remove isolates
g_cutoff <- igraph::delete_vertices(g_cutoff, igraph::V(g_cutoff)[igraph::degree(g_cutoff) == 0])
plot(
g_cutoff,
layout = layout_with_fr,
vertex.label = NA,
vertex.size = 5,        # Smaller node size
vertex.shape = "sphere" # Interesting shape (e.g., "sphere", "circle", "square")
)
# Basic graph properties
igraph::gsize(g)
igraph::gsize(g_cutoff)        # Number of edges
igraph::vcount(g_cutoff) # Number of vertices
igraph::edge_density(g_cutoff) # Density of the graph
#################################
attributes$DeptGroup <- ifelse(attributes$DeptID %in% c(1, 2, 5), 1, 0)
igraph::V(g_cutoff)$DeptGroup <- attributes$DeptGroup[match(igraph::V(g_cutoff)$name, attributes$NodeName)]
igraph::V(g_cutoff)$color <- ifelse(igraph::V(g_cutoff)$DeptGroup == 1, "red", "orange")
# Plot the network with vertices colored by DeptGroup
plot(
g_cutoff,
vertex.label = NA,
vertex.size = 5,
vertex.shape = 'sphere',
vertex.color = igraph::V(g_cutoff)$color,      # Color based on DeptGroup
edge.color = "gray",                           # Gray edges
main = "Collaboration Network Colored by DeptGroup",
layout = layout_with_fr(g_cutoff)              # Use Fruchterman-Reingold layout
)
legend("bottomright", legend = c("others", "man+eco+beh"), col = c("orange", "red"), pch = 10, pt.cex = 1.5)
# Compute centrality measures
igraph::V(g_cutoff)$Degree <- igraph::degree(g_cutoff, mode = "all")
beta_value <- 0.4
igraph::V(g_cutoff)$BetaCentrality <- power_centrality(
g_cutoff,
nodes = V(g_cutoff),
exponent = beta_value,
rescale = TRUE # Optional: Rescale values for comparability
)
# Create centrality data frame
centrality_df <- data.frame(
DeptGroup = igraph::V(g_cutoff)$DeptGroup,
Degree = igraph::V(g_cutoff)$Degree,
#Betweenness = igraph::V(g_cutoff)$Betweenness,
BetaCentrality = igraph::V(g_cutoff)$BetaCentrality
)
centrality_df
# Perform t-tests
t_test_degree <- t.test(Degree ~ DeptGroup, data = centrality_df)
print("T-test for Degree Centrality:")
print(t_test_degree)
t_test_beta <- t.test(BetaCentrality ~ DeptGroup, data = centrality_df)
print("T-test for Beta Centrality:")
print(t_test_beta)
# Identify nodes with highest centrality
max_degree <- max(igraph::V(g_cutoff)$Degree)
nodes_max_degree <- igraph::V(g_cutoff)$name[igraph::V(g_cutoff)$Degree == max_degree]
cat("Node(s) with highest Degree Centrality:", nodes_max_degree, "\n")
cat("Degree Centrality Value:", max_degree, "\n\n")
max_BetaCentrality <- max(igraph::V(g_cutoff)$BetaCentrality)
nodes_max_BetaCentrality <- igraph::V(g_cutoff)$name[igraph::V(g_cutoff)$BetaCentrality == max_BetaCentrality]
cat("Node(s) with highest BetaCentrality:", nodes_max_BetaCentrality, "\n")
cat("BetaCentrality Value:", max_BetaCentrality, "\n")
# Correlate Degree and Betweenness
correlation <- cor.test(centrality_df$Degree, centrality_df$BetaCentrality)
print("Correlation between Degree and Beta Centrality:")
print(correlation)
# Correlate DeptGroup with centrality measures
cor_dept_degree <- cor.test(centrality_df$DeptGroup, centrality_df$Degree)
print("Correlation between DeptGroup and Degree Centrality:")
print(cor_dept_degree)
cor_dept_betweenness <- cor.test(centrality_df$DeptGroup, centrality_df$BetaCentrality)
print("Correlation between DeptGroup and Beta Centrality:")
print(cor_dept_betweenness)
# Highlight nodes with highest Degree and max_BetaCentrality
V(g_cutoff)$frame.color <- ifelse(V(g_cutoff)$name %in% c(nodes_max_degree, max_BetaCentrality), "black", NA)
V(g_cutoff)$frame.width <- ifelse(V(g_cutoff)$name %in% c(nodes_max_degree, max_BetaCentrality), 2, 0)
# Plot the network with highlighted nodes
plot(
g_cutoff,
vertex.size = 5 + V(g_cutoff)$Degree / max(V(g_cutoff)$Degree) * 10,
vertex.label = NA,
vertex.color = V(g_cutoff)$color,
vertex.frame.color = V(g_cutoff)$frame.color,
vertex.frame.width = V(g_cutoff)$frame.width,
edge.color = "gray",
main = "Collaboration Network Colored by Sex with Key Nodes Highlighted",
layout = layout_with_fr(g_cutoff)
)
# Load required package
if (!require(graphics)) {
install.packages("graphics")
}
# Adjust vertex colors to include alpha transparency
# Assuming V(g_cutoff)$color already contains base colors like "pink" and "lightblue"
V(g_cutoff)$color <- adjustcolor(V(g_cutoff)$color, alpha.f = 0.8)  # alpha.f is the transparency level (0 = fully transparent, 1 = opaque)
# Highlight nodes with highest Degree and Beta Centrality
V(g_cutoff)$frame.color <- ifelse(V(g_cutoff)$name %in% c(nodes_max_degree, nodes_max_BetaCentrality), "black", NA)
V(g_cutoff)$frame.width <- ifelse(V(g_cutoff)$name %in% c(nodes_max_degree, nodes_max_BetaCentrality), 2, 0)
# Plot the network with highlighted nodes and transparency
plot(
g_cutoff,
vertex.size = 5 + V(g_cutoff)$Degree / max(V(g_cutoff)$Degree) * 10,
vertex.label = NA,
vertex.color = V(g_cutoff)$color,
vertex.frame.color = V(g_cutoff)$frame.color,
vertex.frame.width = V(g_cutoff)$frame.width,
edge.color = "gray",
main = "Collaboration Network",
layout = layout_with_fr(g_cutoff)
)
