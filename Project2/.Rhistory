sna::betweenness(Simpsons_n, gmode="graph")
igraph::betweenness(Simpsons_i)
igraph::betweenness(Simpsons_i, normalized=T)
### 8. Beta centrality
# Matrix multiplication
MAT4<-matrix(c(
0, 1, 1, 0,
1, 0, 1, 0,
1, 1, 0, 1,
0, 0, 1, 0),4,4)
MAT4%*%MAT4
MAT4%*%MAT4%*%MAT4
### Example dataset
MAT11<-matrix(c(
0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0,
0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0,
0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,
0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0),11,11)
gplot(MAT11)
eigen(MAT11)$values
1/max(eigen(MAT11)$values)
MAXBETA<-1/max(eigen(MAT11)$values)
# Power/Beta centrality
sna::bonpow(MAT11)
# doesn't work because exponent = 1 by default
?sna::bonpow
sna::bonpow(MAT11, exponent=.1)/sum(sna::bonpow(MAT11, exponent=.1))
GRAPH11<-graph_from_adjacency_matrix(MAT11,mode=c("undirected"),diag= FALSE)
igraph::bonpow(GRAPH11, exponent=.1)
# -----------------------------------------------------
# Filip Agneessens
# SCRIPT 2 - Centrality 1
# 2 October 2024
# -----------------------------------------------------
### 0. Activating packages
install.packages("igraph")
library(igraph)
install.packages("sna")
library(sna)
### 1. Reading in data
Simpsons_n<-matrix(c(0, 1, 1, 1, 0, 1, 0, 0, 0, 0,
1, 0, 1, 0, 1, 0, 1, 0, 0, 0,
1, 1, 0, 1, 1, 1, 1, 0, 0, 0,
1, 0, 1, 0, 0, 1, 0, 0, 0, 0,
0, 1, 1, 0, 0, 0, 1, 0, 0, 0,
1, 0, 1, 1, 0, 0, 1, 1, 0, 0,
0, 1, 1, 0, 1, 1, 0, 1, 0, 0,
0, 0, 0, 0, 0, 1, 1, 0, 1, 0,
0, 0, 0, 0, 0, 0, 0, 1, 0, 1,
0, 0, 0, 0, 0, 0, 0, 0, 1, 0),10,10)
# Adding names (node labels)
rownames(Simpsons_n)<-c("Ned","Marge","Homer","Abe","Maggie",
"Bart","Lisa","Krusty","Bob","Cecil")
colnames(Simpsons_n)<-c("Ned","Marge","Homer","Abe","Maggie",
"Bart","Lisa","Krusty","Bob","Cecil")
### 3. Plotting a network
# Plotting with sna (use matrix)
sna::gplot(Simpsons_n, gmode="graph", displaylabels = TRUE)
# Plotting with igraph
# -> need to make it into an igraph object first!
Simpsons_i<-graph_from_adjacency_matrix(Simpsons_n, mode = c("undirected"))
Simpsons_i
plot(Simpsons_i)
### 4. Calculating degree centrality
# Degree centrality with sna
sna::degree(Simpsons_n, gmode="graph")
# -> it's better if we could add the names...
out1<-sna::degree(Simpsons_n, gmode="graph")
names(out1)<-row.names(Simpsons_n)
out1
# Degree centrality with igraph
igraph::degree(Simpsons_i)
### 5. Density
sna::gden(Simpsons_n)
igraph::edge_density(Simpsons_i)
### 6. Closeness centrality
### 6.1. Freeman's closeness
sna::closeness(Simpsons_n, gmode="graph")
igraph::closeness(Simpsons_i) # 1/geodesic
igraph::closeness(Simpsons_i, normalized=T)
## Freeman's closeness - second example
Simpsons_n2<-Simpsons_n
Simpsons_n2[9,10]<-0
Simpsons_n2[10,9]<-0
sna::closeness(Simpsons_n2, gmode="graph")
Simpsons_i2<-Simpsons_i
Simpsons_i2[9,10]<-0
igraph::closeness(Simpsons_i2, normalized=T)
### 6.3 Reciprocal closeness
sna::closeness(Simpsons_n, gmode="graph", cmode="suminvundir")
out1<-sna::closeness(Simpsons_n, gmode="graph", cmode="suminvundir")
names(out1)<-row.names(Simpsons_n)
out1
# NOTE: in igraph this seems to be called harmonic mean
igraph::harmonic_centrality(Simpsons_i, normalized =TRUE)
#Y. Rochat, Closeness Centrality Extended to Unconnected Graphs: the Harmonic Centrality Index, ASNA 2009. https://infoscience.epfl.ch/record/200525
## Reciprocal closeness - second example
sna::closeness(Simpsons_n2, gmode="graph", cmode="suminvundir")
igraph::harmonic_centrality(Simpsons_i2, normalized =TRUE)
### 7. Betweenness
sna::betweenness(Simpsons_n, gmode="graph")
igraph::betweenness(Simpsons_i)
igraph::betweenness(Simpsons_i, normalized=T)
### 8. Beta centrality
# Matrix multiplication
MAT4<-matrix(c(
0, 1, 1, 0,
1, 0, 1, 0,
1, 1, 0, 1,
0, 0, 1, 0),4,4)
MAT4%*%MAT4
MAT4%*%MAT4%*%MAT4
### Example dataset
MAT11<-matrix(c(
0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0,
0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0,
0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,
0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0),11,11)
gplot(MAT11)
eigen(MAT11)$values
1/max(eigen(MAT11)$values)
MAXBETA<-1/max(eigen(MAT11)$values)
# Power/Beta centrality
sna::bonpow(MAT11)
# doesn't work because exponent = 1 by default
?sna::bonpow
sna::bonpow(MAT11, exponent=.1)/sum(sna::bonpow(MAT11, exponent=.1))
GRAPH11<-graph_from_adjacency_matrix(MAT11,mode=c("undirected"),diag= FALSE)
igraph::bonpow(GRAPH11, exponent=.1)
igraph::bonpow(GRAPH11, exponent=.2)
igraph::bonpow(GRAPH11, exponent=.3)
igraph::bonpow(GRAPH11, exponent=.4)
igraph::bonpow(GRAPH11, exponent=.5)
igraph::bonpow(GRAPH11, exponent=MAXBETA)
library(igraph)
library(sna)
setwd("C:/Users/Mardeen/Desktop/University/AdvancedSN/Project1/sol.R")
#importing the data
load("Borgatti_Scientists504.RDA")
#the network
network_info <- Borgatti_Scientists504[["NetworkInfo"]]
#the attribute file
attributes <- Borgatti_Scientists504[["Attributes"]]
collaboration <- Borgatti_Scientists504$Collaboration
setwd("C:/Users/Mardeen/Desktop/University/AdvancedSN/Project1/")
#importing the data
load("Borgatti_Scientists504.RDA")
#the network
network_info <- Borgatti_Scientists504[["NetworkInfo"]]
#the attribute file
attributes <- Borgatti_Scientists504[["Attributes"]]
collaboration <- Borgatti_Scientists504$Collaboration
# Assuming 'network_info' is your adjacency matrix
collaboration_matrix <- as.matrix(collaboration)
# Apply the cutoff
collaboration_cutoff <- collaboration_matrix
collaboration_cutoff[collaboration_cutoff <= 3] <- 0
# Convert to binary adjacency matrix
collaboration_binary <- collaboration_cutoff
collaboration_binary[collaboration_binary > 0] <- 1
# Create the cutoff graph
g_cutoff <- igraph::graph_from_adjacency_matrix(
collaboration_binary,
mode = "undirected",
weighted = FALSE,
diag = FALSE
)
num_nodes_before <- igraph::vcount(g_cutoff)
# Remove isolates
g_cutoff <- igraph::delete_vertices(g_cutoff, igraph::V(g_cutoff)[igraph::degree(g_cutoff) == 0])
num_nodes_after <- igraph::vcount(g_cutoff)
cat("Number of nodes before:", num_nodes_before, "\n")
cat("Number of nodes after:", num_nodes_after, "\n")
# Set seed to obtain always the same plot
set.seed(42)
plot(
g_cutoff,
layout = layout_with_fr,
vertex.label = NA,
vertex.size = 5,        # Smaller node size
vertex.shape = "sphere" # Interesting shape (e.g., "sphere", "circle", "square")
)
attributes$DeptGroup <- ifelse(attributes$DeptID %in% c(1, 2, 5), 1, 0)
igraph::V(g_cutoff)$DeptGroup <- attributes$DeptGroup[match(igraph::V(g_cutoff)$name, attributes$NodeName)]
igraph::V(g_cutoff)$color <- ifelse(igraph::V(g_cutoff)$DeptGroup == 1, "green", "orange")
# Plot the network with vertices colored by DeptGroup
plot(
g_cutoff,
vertex.label = NA,
vertex.size = 5,
vertex.shape = 'sphere',
vertex.color = igraph::V(g_cutoff)$color,      # Color based on DeptGroup
edge.color = "gray",                           # Gray edges
main = "Collaboration Network Colored by DeptGroup",
layout = layout_with_fr(g_cutoff)              # Use Fruchterman-Reingold layout
)
legend("bottomleft",
legend = c("Others", "Management+Economics+Behavioural"),
col = c("orange", "green"),
pch = 19,
pt.cex = 1.5,
cex = 0.9,
bty = "n")
# Compute position measures
igraph::V(g_cutoff)$Degree <- igraph::degree(g_cutoff, mode = "all")
beta_value <- 0.5
igraph::V(g_cutoff)$BetaCentrality <- power_centrality(
g_cutoff,
nodes = V(g_cutoff),
exponent = beta_value,
)
# Create position data frame
position_df <- data.frame(DeptGroup = igraph::V(g_cutoff)$DeptGroup,
Degree = igraph::V(g_cutoff)$Degree,
BetaCentrality = igraph::V(g_cutoff)$BetaCentrality)
# Identify nodes with highest position measures
max_degree <- max(igraph::V(g_cutoff)$Degree)
nodes_max_degree <- igraph::V(g_cutoff)$name[igraph::V(g_cutoff)$Degree == max_degree]
cat("Node(s) with highest Degree Centrality:", nodes_max_degree, "\n")
cat("Degree Centrality Value:", max_degree, "\n\n")
max_beta_centrality <- max(igraph::V(g_cutoff)$BetaCentrality)
nodes_max_beta_centrality <- igraph::V(g_cutoff)$name[igraph::V(g_cutoff)$BetaCentrality == max_beta_centrality]
cat("Node(s) with highest BetaCentrality Centrality:", nodes_max_beta_centrality, "\n")
cat("BetaCentrality Centrality Value:", max_beta_centrality, "\n")
library(igraph)
library(sna)
setwd("C:/Users/Mardeen/Desktop/University/AdvancedSN/Project1/")
#importing the data
load("Borgatti_Scientists504.RDA")
#the network
network_info <- Borgatti_Scientists504[["NetworkInfo"]]
#the attribute file
attributes <- Borgatti_Scientists504[["Attributes"]]
collaboration <- Borgatti_Scientists504$Collaboration
# Assuming 'network_info' is your adjacency matrix
collaboration_matrix <- as.matrix(collaboration)
# Apply the cutoff
collaboration_cutoff <- collaboration_matrix
collaboration_cutoff[collaboration_cutoff <= 3] <- 0
# Convert to binary adjacency matrix
collaboration_binary <- collaboration_cutoff
collaboration_binary[collaboration_binary > 0] <- 1
# Create the cutoff graph
g_cutoff <- igraph::graph_from_adjacency_matrix(
collaboration_binary,
mode = "undirected",
weighted = FALSE,
diag = FALSE
)
num_nodes_before <- igraph::vcount(g_cutoff)
# Remove isolates
g_cutoff <- igraph::delete_vertices(g_cutoff, igraph::V(g_cutoff)[igraph::degree(g_cutoff) == 0])
num_nodes_after <- igraph::vcount(g_cutoff)
cat("Number of nodes before:", num_nodes_before, "\n")
cat("Number of nodes after:", num_nodes_after, "\n")
# Set seed to obtain always the same plot
set.seed(42)
plot(
g_cutoff,
layout = layout_with_fr,
vertex.label = NA,
vertex.size = 5,        # Smaller node size
vertex.shape = "sphere" # Interesting shape (e.g., "sphere", "circle", "square")
)
attributes$DeptGroup <- ifelse(attributes$DeptID %in% c(1, 2, 5), 1, 0)
igraph::V(g_cutoff)$DeptGroup <- attributes$DeptGroup[match(igraph::V(g_cutoff)$name, attributes$NodeName)]
plot(
g_cutoff,
layout = layout_with_fr,
vertex.label = NA,
vertex.size = 5,        # Smaller node size
vertex.shape = "sphere", # Interesting shape (e.g., "sphere", "circle", "square")
main = "Your Title Here" # Add a title
)
plot(
g_cutoff,
layout = layout_with_fr,
vertex.label = NA,
vertex.size = 5,        # Smaller node size
vertex.shape = "sphere", # Interesting shape (e.g., "sphere", "circle", "square")
main = "Network graph after cutoff" # Add a title
)
df <- read.csv('Data_Gender_4.xlsx')
setwd("C:/Users/Mardeen/Desktop/University/AdvancedSN/Project2/")
df <- read.csv('Data_Gender_4.xlsx')
df <- read.csv('Data_Gender_4.xlsx', header = TRUE, sep = ";")
df <- read.csv2('Data_Gender_4.xlsx')
### Read dataset
install.packages("xlsx")
library(readxl)
df <- read.xlsx('Data_Gender_4.xlsx')
df <- xlsx::read.xlsx('Data_Gender_4.xlsx')
### Read dataset
install.packages("readxl")
library(readxl)
df <- readxl::read.xlsx('Data_Gender_4.xlsx')
df <- read.xlsx('Data_Gender_4.xlsx')
df <- read_excel('Data_Gender_4.xlsx')
df <- readxl::read_excel('Data_Gender_4.xlsx')
df
head(df)
print(df.describe)
print(describe(df))
print(str(df))
EIES_T2F_n <- df
EIES_T2F_n <- df.copy()
EIES_T2F_n <- copy(df)
EIES_T2F_n <- df.copy
EIES_T2F_n <- df
EIES_Model1<-ergm(EIES_T2F_n ~ edges+mutual
+gwidegree(decay=.3, fixed=TRUE) +gwodegree(decay=.3, fixed=TRUE)
+dgwesp(type="OTP", decay=.5, fixed=TRUE)
+dgwesp(type="ITP", decay=.5, fixed=TRUE),
control=control.ergm(seed=102, MCMC.runtime.traceplot=TRUE),
verbose=TRUE)
### ================== Part I ================== ###
### Run three models using the cutoff friends (or higher)
library(sna)
library(ergm)
install.packages("ergm")
par(mar=c(1,1,1,1))
par(mfrow=c(1,1))
gplot(EIES_T2F_n)
par(mfrow=c(4,2))
setwd("C:/Users/Mardeen/Desktop/University/AdvancedSN/Project2/")
### ================== Read dataset ================== ###
if (!requireNamespace("readxl", quietly = TRUE)) {
install.packages("readxl")
}
library(readxl)
df <- readxl::read_excel('Data_Gender_4.xlsx')
print(str(df))
### ================== Part I ================== ###
### Run three models using the cutoff friends (or higher)
library(sna)
if (!requireNamespace("ergm", quietly = TRUE)) {
install.packages("ergm")
}
library(ergm)
par(mar=c(1,1,1,1))
par(mfrow=c(1,1))
gplot(df)
sna::gplot(df)
df
head(df)
EIES_T2<-read.csv("EIES_t2.csv",row.names=1)
EIES_T2F<-EIES_T2>2
EIES_T2F_n<-as.network(df)
EIES_Model1<-ergm(EIES_T2F_n ~ edges+mutual
+gwidegree(decay=.3, fixed=T)
+gwodegree(decay=.3, fixed=T)
+dgwesp(type="OTP", decay=.5, fixed=T)
+dgwesp(type="ITP", decay=.5, fixed=T),                 ,
control=control.ergm(seed=102, MCMC.runtime.traceplot=T),
verbose=T)
library(ergm)
### ================== Part I ================== ###
### Run three models using the cutoff friends (or higher)
library(sna)
par(mar=c(1,1,1,1))
par(mfrow=c(1,1))
gplot(df)
par(mfrow=c(4,2))
EIES_T2F_n<-as.network(df)
EIES_Model1<-ergm(EIES_T2F_n ~ edges+mutual
+gwidegree(decay=.3, fixed=T)
+gwodegree(decay=.3, fixed=T)
+dgwesp(type="OTP", decay=.5, fixed=T)
+dgwesp(type="ITP", decay=.5, fixed=T),                 ,
control=control.ergm(seed=102, MCMC.runtime.traceplot=T),
verbose=T)
EIES_Model1<-ergm::ergm(EIES_T2F_n ~ edges+mutual
+gwidegree(decay=.3, fixed=T)
+gwodegree(decay=.3, fixed=T)
+dgwesp(type="OTP", decay=.5, fixed=T)
+dgwesp(type="ITP", decay=.5, fixed=T),                 ,
control=control.ergm(seed=102, MCMC.runtime.traceplot=T),
verbose=T)
EIES_T2F_n<-as.network(EIES_T2F)
EIES_Model1<-ergm(EIES_T2F_n ~ edges+mutual
+gwidegree(decay=.3, fixed=T)
+gwodegree(decay=.3, fixed=T)
+dgwesp(type="OTP", decay=.5, fixed=T)
+dgwesp(type="ITP", decay=.5, fixed=T),                 ,
control=control.ergm(seed=102, MCMC.runtime.traceplot=T),
verbose=T)
setwd("C:/Users/Mardeen/Desktop/University/AdvancedSN/Project2/")
### ================== Read dataset ================== ###
if (!requireNamespace("readxl", quietly = TRUE)) {
install.packages("readxl")
}
library(readxl)
df <- readxl::read_excel('Data_Gender_4.xlsx')
print(str(df))
EIES_T2<-read.csv("EIES_t2.csv",row.names=1)
EIES_T2F<-EIES_T2>2
### ================== Part I ================== ###
### Run three models using the cutoff friends (or higher)
library(sna)
if (!requireNamespace("ergm", quietly = TRUE)) {
install.packages("ergm")
}
library(ergm)
## mail ok
par(mar=c(1,1,1,1))
par(mfrow=c(1,1))
gplot(df)
par(mfrow=c(4,2))
EIES_T2F_n<-as.network(EIES_T2F)
EIES_Model1<-ergm(EIES_T2F_n ~ edges+mutual
+gwidegree(decay=.3, fixed=TRUE) +gwodegree(decay=.3, fixed=TRUE)
+dgwesp(type="OTP", decay=.5, fixed=TRUE)
+dgwesp(type="ITP", decay=.5, fixed=TRUE),
control=control.ergm(seed=102, MCMC.runtime.traceplot=TRUE),
verbose=TRUE)
gplot(EIES_T2F)
head(EIES_T2F)
head(df)
attributes <- readxl::read_excel('Data_Gender_4.xlsx')
print(str(attributes))
head(attributes)
installed_packages <- installed.packages()
# Get a list of all installed package names
packages_to_remove <- rownames(installed_packages)
# Remove all packages
for (pkg in packages_to_remove) {
remove.packages(pkg)
}
installed.packages()  # Should return an empty result or only base packages
setwd("C:/Users/Mardeen/Desktop/University/AdvancedSN/Project2/")
### ================== Read dataset ================== ###
if (!requireNamespace("readxl", quietly = TRUE)) {
install.packages("readxl")
}
installed.packages()  # Should return an empty result or only base packages
setwd("C:/Users/Mardeen/Desktop/University/AdvancedSN/Project2/")
### ================== Read dataset ================== ###
if (!requireNamespace("readxl", quietly = TRUE)) {
install.packages("readxl")
}
library(readxl)
### ================== Read dataset ================== ###
if (!requireNamespace("readxl", quietly = TRUE)) {
install.packages("readxl")
}
library(readxl)
install.packages("readxl")
library(readxl)
attributes <- readxl::read_excel('Data_Gender_4.xlsx')
print(str(attributes))
### ================== Part I ================== ###
### Run three models using the cutoff friends (or higher)
library(sna)
install.packages("sna")
install.packages("ergm")
library(ergm)
### ================== Part I ================== ###
### Run three models using the cutoff friends (or higher)
library(sna)
## mail ok
par(mar=c(1,1,1,1))
par(mfrow=c(1,1))
gplot(EIES_T2F)
par(mfrow=c(4,2))
EIES_Model1<-ergm(EIES_T2F_n ~ edges+mutual
+gwidegree(decay=.3, fixed=TRUE) +gwodegree(decay=.3, fixed=TRUE)
+dgwesp(type="OTP", decay=.5, fixed=TRUE)
+dgwesp(type="ITP", decay=.5, fixed=TRUE),
control=control.ergm(seed=102, MCMC.runtime.traceplot=TRUE),
verbose=TRUE)
EIES_Model2<-ergm(EIES_T2F_n ~ edges+mutual
+nodeicov(attributes$Gender)+nodeocov(attributes$Gender)+nodematch(attributes$Gender),
control=control.ergm(seed=102, MCMC.runtime.traceplot=TRUE),
verbose=TRUE)
EIES_Model3<-ergm(EIES_T2F_n ~ edges+mutual
+gwidegree(decay=.3, fixed=TRUE) +gwodegree(decay=.3, fixed=TRUE)
+dgwesp(type="OTP", decay=.5, fixed=TRUE)
+dgwesp(type="ITP", decay=.5, fixed=TRUE)
+nodeicov(attributes$Gender)+nodeocov(attributes$Gender)+nodematch(attributes$Gender),
control=control.ergm(seed=102, MCMC.runtime.traceplot=TRUE),
verbose=TRUE)
library(ergm)
EIES_Model2<-ergm(EIES_T2F_n ~ edges+mutual
+nodeicov(attributes$Gender)+nodeocov(attributes$Gender)+nodematch(attributes$Gender),
control=control.ergm(seed=102, MCMC.runtime.traceplot=TRUE),
verbose=TRUE)
EIES_Model3<-ergm(EIES_T2F_n ~ edges+mutual
+gwidegree(decay=.3, fixed=TRUE) +gwodegree(decay=.3, fixed=TRUE)
+dgwesp(type="OTP", decay=.5, fixed=TRUE)
+dgwesp(type="ITP", decay=.5, fixed=TRUE)
+nodeicov(attributes$Gender)+nodeocov(attributes$Gender)+nodematch(attributes$Gender),
control=control.ergm(seed=102, MCMC.runtime.traceplot=TRUE),
verbose=TRUE)
set.vertex.attribute(EIES_T2F_n, "gender", attributes$Gender)
EIES_Model2<-ergm(EIES_T2F_n ~ edges+mutual
+nodeicov("Gender")+nodeocov("Gender")+nodematch("Gender"),
control=control.ergm(seed=102, MCMC.runtime.traceplot=TRUE),
verbose=TRUE)
